// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// db2dbml postgres 'postgresql://admin:root@localhost:5432/fime_db?' -o database.dbml

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum cho Role
enum Role {
  ADMIN // Quyền hạn cao nhất
  MANAGER // Điều phối công việc trong đội
  TREASURER // Thủ quỹ, quản lý quỹ đội
  MEMBER // Thành viên
}

// Enum cho trạng thái User
enum UserStatus {
  ACTIVE // Đang hoạt động
  INACTIVE // Không hoạt động
  BANNED // Bị cấm (không thể đăng nhập hoặc thực hiện thao tác)
}

model User {
  id            String        @id @default(uuid())
  fullname      String
  email         String        @unique
  password      String
  phone         String        @unique
  address       String?
  image         String?
  positionId    String?
  position      Position?     @relation(fields: [positionId], references: [id], onDelete: SetNull)
  teamId        String?
  team          Team?         @relation(fields: [teamId], references: [id], onDelete: SetNull)
  role          Role[]        @default([MEMBER])
  status        UserStatus    @default(INACTIVE)
  codeId        String?
  codeExpiredAt DateTime?
  userActions   UserActions[]

  userTasks      UserTask[]
  TaskComment    TaskComment[]
  TaskAttachment TaskAttachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserActions {
  id        String   @id @default(uuid())
  userId    String
  action    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  id          String   @id @default(uuid())
  name        String
  description String?
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Position {
  id          String   @id @default(uuid())
  name        String
  description String?
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum TaskStatus {
  TODO // Chưa làm
  IN_PROGRESS // Đang làm
  IN_REVIEW // Đang xem xét
  DONE // Đã hoàn thành
}

enum TaskPriority {
  LOW // Thấp
  MEDIUM // Trung bình
  HIGH // Cao
}

enum TaskType {
  TODO // Công việc
  PUBLICATION // Ấn phẩm
  EVENT // Sự kiện
  MEETING // Cuộc họp
  TRAINING // Đào tạo
  WORKSHOP
}

model Task {
  id             String           @id @default(uuid())
  name           String
  description    String?
  color          String?
  type           TaskType         @default(TODO)
  status         TaskStatus       @default(TODO)
  priority       TaskPriority     @default(MEDIUM)
  startDate      DateTime
  deadline       DateTime
  todoLists      TodoList[]
  userId         String?
  userTasks      UserTask[]
  TaskComment    TaskComment[]
  TaskAttachment TaskAttachment[]

  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserTask {
  taskId String
  userId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  position Int @default(0) @db.SmallInt // Vị trí của thẻ Task trong cột, bắt đầu từ 0

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([taskId, userId])
}

model TaskComment {
  id      String @id @default(uuid())
  content String
  taskId  String
  userId  String
  task    Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TaskAttachment {
  id     String @id @default(uuid())
  url    String
  taskId String
  userId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TodoList {
  id      String  @id @default(uuid())
  content String
  taskId  String
  task    Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  isDone  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
