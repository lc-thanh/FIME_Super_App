// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Lệnh chuyển từ PostgreSQL sang DBML (để tạo sơ đồ ERD)
// db2dbml postgres 'postgresql://admin:root@localhost:5432/fime_db?' -o database.dbml

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum cho Role
enum Role {
  ADMIN // Quyền hạn cao nhất
  MANAGER // Điều phối công việc trong đội
  MEMBER // Thành viên
  FORMER_MEMBER // Cựu thành viên (không còn hoạt động trong đội nhưng vẫn có quyền truy cập vào chương trình) (sẽ không được chương trình gợi ý khi chọn người tham gia công việc)
}

// Enum cho trạng thái User
enum UserStatus {
  ACTIVE // Đang hoạt động
  INACTIVE // Không hoạt động
  BANNED // Bị cấm (không thể đăng nhập hoặc thực hiện thao tác)
}

model User {
  id            String        @id @default(uuid())
  fullname      String
  email         String        @unique
  password      String
  phone         String        @unique
  address       String?
  image         String?
  positionId    String?
  position      Position?     @relation(fields: [positionId], references: [id], onDelete: SetNull)
  teamId        String?
  team          Team?         @relation(fields: [teamId], references: [id], onDelete: SetNull)
  gen           Gen?          @relation(fields: [genId], references: [id], onDelete: SetNull)
  genId         String?
  role          Role[]        @default([MEMBER])
  status        UserStatus    @default(INACTIVE)
  codeId        String?
  codeExpiredAt DateTime?
  userActions   UserActions[]

  tasks          Task[]
  todoLists      TodoList[]
  taskComment    TaskComment[]
  taskAttachment TaskAttachment[]
  taskActivities TaskActivity[]
  workspaces     Workspace[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserActionType {
  ADD_MEMBER // Thêm thành viên
  REMOVE_MEMBER // Xóa thành viên
  EDIT_MEMBER // Chỉnh sửa thông tin thành viên

  ADD_TEAM // Thêm ban
  REMOVE_TEAM // Xóa ban
  EDIT_TEAM // Chỉnh sửa thông tin ban

  ADD_POSITION // Thêm chức vụ
  REMOVE_POSITION // Xóa chức vụ
  EDIT_POSITION // Chỉnh sửa thông tin chức vụ

  ADD_GEN // Thêm gen
  REMOVE_GEN // Xóa gen
  EDIT_GEN // Chỉnh sửa thông tin gen

  ADD_WORKSPACE // Thêm không gian làm việc
  REMOVE_WORKSPACE // Xóa không gian làm việc
  EDIT_WORKSPACE_NAME // Chỉnh sửa tên không gian làm việc

  ADD_LATEST_PUBLICATION // Thêm ấn phẩm mới
  ACTIVE_LATEST_PUBLICATION // Kích hoạt ấn phẩm
  REMOVE_LATEST_PUBLICATION // Xóa ấn phẩm
  EDIT_LATEST_PUBLICATION // Chỉnh sửa thông tin ấn phẩm

  ADD_NEWEST_PRODUCT // Thêm sản phẩm mới
  REMOVE_NEWEST_PRODUCT // Xóa sản phẩm
  EDIT_NEWEST_PRODUCT // Chỉnh sửa thông tin sản phẩm
}

model UserActions {
  id        String         @id @default(uuid())
  type      UserActionType
  userId    String
  content   String
  createdAt DateTime       @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  id           String        @id @default(uuid())
  name         String
  description  String?
  users        User[]
  teamSegments TeamSegment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Position {
  id          String  @id @default(uuid())
  name        String
  description String?
  users       User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Gen {
  id          String  @id @default(uuid())
  name        String
  description String?
  users       User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// TASK SECTION

enum TaskStatus {
  TODO // Chưa làm
  IN_PROGRESS // Đang làm
  IN_REVIEW // Đang xem xét
  DONE // Đã hoàn thành
}

enum TaskPriority {
  LOW // Thấp
  MEDIUM // Trung bình
  HIGH // Cao
}

enum TaskType {
  TODO // Công việc
  MONTHLY_SEGMENTS // Chuyên mục hàng tháng
  PUBLICATION // Ấn phẩm
  EVENT // Sự kiện
  MEETING // Cuộc họp
  TRAINING // Đào tạo
  WORKSHOP
}

model Task {
  id               String           @id @default(uuid())
  title            String
  note             Json?
  position         Float
  color            String?
  type             TaskType         @default(TODO)
  status           TaskStatus       @default(TODO)
  priority         TaskPriority     @default(MEDIUM)
  startDate        DateTime?
  deadline         DateTime?
  todoLists        TodoList[]
  users            User[]
  taskComments     TaskComment[]
  taskAttachments  TaskAttachment[]
  taskActivities   TaskActivity[]
  workspaceId      String
  workspace        Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  monthlySegment   MonthlySegment?  @relation(fields: [monthlySegmentId], references: [id], onDelete: SetNull)
  monthlySegmentId String?

  isDeleted Boolean   @default(false)
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model TodoList {
  id        String    @id @default(uuid())
  order     Int       @default(0) @db.SmallInt
  content   String
  isDone    Boolean   @default(false)
  startDate DateTime?
  deadline  DateTime?

  Task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String
  User   User[]

  @@index([taskId])
}

model TaskComment {
  id      String @id @default(uuid())
  content String
  taskId  String
  userId  String
  task    Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TaskAttachment {
  id     String @id @default(uuid())
  title  String
  url    String
  taskId String
  userId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TaskActivityType {
  CREATE_CARD
  DELETE_CARD
  MOVE_CARD
  CHANGE_TITLE
  ADD_ASSIGNEE
  REMOVE_ASSIGNEE
  SYNC_TODO
  SYNC_NOTE
  ADD_ATTACHMENT
  REMOVE_ATTACHMENT
  CHANGE_PRIORITY
  CHANGE_TYPE
  CHANGE_DATE
}

model TaskActivity {
  id      String           @id @default(uuid())
  content String
  type    TaskActivityType
  taskId  String
  userId  String
  task    Task             @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Workspace {
  id    String @id @default(uuid())
  name  String
  tasks Task[]
  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MonthlySegment {
  id          String        @id @default(uuid())
  name        String
  description String?
  frequency   Int           @default(1) // Tần suất xuất hiện hàng tháng
  tasks       Task[]
  teamSegment TeamSegment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Để lưu số lượng người tham gia trong từng đội cho từng chuyên mục
model TeamSegment {
  Team               Team           @relation(fields: [teamId], references: [id])
  teamId             String
  MonthlySegment     MonthlySegment @relation(fields: [monthlySegmentId], references: [id])
  monthlySegmentId   String
  number_of_assignee Int? // Số lượng người tham gia trong đội

  @@id([teamId, monthlySegmentId])
}

// END TASK SECTION

// FIME LANDING PAGE SECTION

model LatestPublication {
  id         String  @id @default(uuid())
  title      String
  note       String?
  embed_code String
  isActive   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NewestProducts {
  id    String    @id @default(uuid())
  title String
  date  DateTime?
  note  String?
  image String?
  link  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Memories {
  id         String  @id @default(uuid())
  title      String
  mini_title String?
  image      String?
  link       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// END FIME LANDING PAGE SECTION

model Announcement {
  id          String  @id @default(uuid())
  title       String
  description String?
  image       String?
  link        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
